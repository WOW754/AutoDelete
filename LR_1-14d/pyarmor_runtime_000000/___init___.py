import base64
xx = b'''
aW1wb3J0IHlmaW5hbmNlIGFzIHlmDQppbXBvcnQgcGFuZGFzIGFzIHBkDQppbXBvcnQgbnVtcHkgYXMgbnANCmltcG9ydCBtYXRwbG90bGliLnB5cGxvdCBhcyBwbHQNCmltcG9ydCBtYXRwbG90bGliLmRhdGVzIGFzIG1kYXRlcw0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YQ0KZnJvbSBza2xlYXJuLm1vZGVsX3NlbGVjdGlvbiBpbXBvcnQgdHJhaW5fdGVzdF9zcGxpdA0KZnJvbSBza2xlYXJuLmxpbmVhcl9tb2RlbCBpbXBvcnQgTGluZWFyUmVncmVzc2lvbg0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgaW8NCg0KIyBHZXQgdXNlciBpbnB1dA0KY3J5cHRvMiA9ICdCVEMtVVNEJw0KdGVzdF9zaXplMiA9IDAuMg0KcmFuZG9tX3N0YXRlMiA9IDQyDQoNCiMgRGVmaW5lIHRoZSBkYXkgaW50ZXJ2YWwNCmRheXMgPSBbMSwgMywgNSwgNywgMTAsIDE0XQ0KDQpkYXlzX3dlYmhvb2sgPSB7MTonaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTM0MDAwNDEzMjI5MTA4ODUwNC92T3A4R3QxTVFKeEt5aXA5MENrb1VkenFjNWdYRnFlY0JUd1BpYXRvUmNyTFVfVEtwVlRnZFdIT0VoTnVMdWVIYUpwMScsDQogICAgICAgICAgICAgICAgMzonaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTM0MDAwODcyOTI4MTY5MTc1MS9ScDNzV3NxbFRfMnNid2hCLU9OSGlNVnpEV3VOVGdjc3QzUjVqQ2VIUlUtQmtGS0ZBdlRaXzlGY09XVVAwZVdQb2xyeCcsDQogICAgICAgICAgICAgICAgNTonaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTM0MDAwODg1MDM5MjA4ODU4Ny9URk9oNU4yZDR6NTVuYVdLSHV6MWdSYVM5bmNUSU1NcGtteEhseklfellUTGZNekh1RnhzVnBieXZCbG84c1dUbkdjeicsDQogICAgICAgICAgICAgICAgNzonaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTM0MDAwODk2NjEyMTMyNDY3Ny9BVXlCT3lTbkN3UlFJS0txaEs3VldZM0FWZlZqbHlEUHpjNTNUTmdULWx3TDJSSEU2c0tVY0lYakVRaEZRU2I0bzRNTicsDQogICAgICAgICAgICAgICAgMTA6J2h0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzEzNDA2OTY5ODQ2MjQ5NTUzOTMvVlpPdi1sSjRocG1jaHctSFczaEs1Wjl3UzBjUnh3US1uRzNfMDVqaEtUX0RZRHMzdy11TDBERGFQREhRUjFuNW14VXUnLA0KICAgICAgICAgICAgICAgIDE0OidodHRwczovL2Rpc2NvcmQuY29tL2FwaS93ZWJob29rcy8xMzQwNjk3MjA5NDY0Njg0NjI1L01weHhPSXA1UnZiTkZhaWpsbzZOaU9UX0dTeVk4NHNpMkRJTzhWeGxiSzdDd05uejNPbnFxWlRwQ0oybl83R3NVZ2xtJ30NCg0KDQppbnRlcnZhbHMgPSBbJzFtJywgJzJtJywgJzVtJywgJzE1bScsICczMG0nLCAnNjBtJywgJzkwbScsICcxaCcsICcxZCcsICc1ZCcsICcxd2snLCAnMW1vJywgJzNtbyddDQoNCg0KZm9yIGRheSBpbiBkYXlzOg0KDQogICAgZW5kX2RhdGUgPSBkYXRldGltZS5ub3coKQ0KICAgIHN0YXJ0X2RhdGUgPSBlbmRfZGF0ZSAtIHRpbWVkZWx0YShkYXlzPWRheSkNCiAgICANCiAgICBmb3IgaSBpbiBpbnRlcnZhbHM6DQogICAgICAgIHRyeToNCg0KICAgICAgICAgICAgIyBGZXRjaCBoaXN0b3JpY2FsIHByaWNlIGRhdGENCiAgICAgICAgICAgIGRhdGEgPSB5Zi5kb3dubG9hZChjcnlwdG8yLCBzdGFydD1zdGFydF9kYXRlLCBlbmQ9ZW5kX2RhdGUsIGludGVydmFsPWkpDQoNCiAgICAgICAgICAgICMgQ2hlY2sgaWYgZGF0YSBpcyBlbXB0eQ0KICAgICAgICAgICAgaWYgZGF0YS5lbXB0eToNCiAgICAgICAgICAgICAgICBwcmludCgiTm8gZGF0YSBmb3VuZCBmb3IgdGhlIGdpdmVuIGlucHV0LiIpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICMgUHJlcGFyZSB0aGUgZGF0YQ0KICAgICAgICAgICAgICAgIGRhdGFbJ0RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKGRhdGEuaW5kZXgpDQogICAgICAgICAgICAgICAgZGF0YVsnRGF0ZSddID0gZGF0YVsnRGF0ZSddLm1hcChtZGF0ZXMuZGF0ZTJudW0pICAjIENvbnZlcnQgZGF0ZXMgdG8gbnVtZXJpYyB2YWx1ZXMNCg0KICAgICAgICAgICAgICAgICMgQ3JlYXRlIGEgZGF0YWZyYW1lIHdpdGggJ0RhdGUnIGFuZCAnQ2xvc2UnIGNvbHVtbnMNCiAgICAgICAgICAgICAgICBkZiA9IGRhdGFbWydEYXRlJywgJ0Nsb3NlJ11dLmNvcHkoKQ0KDQogICAgICAgICAgICAgICAgIyBTcGxpdCB0aGUgZGF0YSBpbnRvIHRyYWluaW5nIGFuZCB0ZXN0aW5nIHNldHMNCiAgICAgICAgICAgICAgICBYID0gZGZbWydEYXRlJ11dDQogICAgICAgICAgICAgICAgeSA9IGRmWydDbG9zZSddDQogICAgICAgICAgICAgICAgWF90cmFpbiwgWF90ZXN0LCB5X3RyYWluLCB5X3Rlc3QgPSB0cmFpbl90ZXN0X3NwbGl0KFgsIHksIHRlc3Rfc2l6ZT10ZXN0X3NpemUyLCByYW5kb21fc3RhdGU9cmFuZG9tX3N0YXRlMikNCg0KICAgICAgICAgICAgICAgICMgVHJhaW4gdGhlIGxpbmVhciByZWdyZXNzaW9uIG1vZGVsDQogICAgICAgICAgICAgICAgcmVncmVzc29yID0gTGluZWFyUmVncmVzc2lvbigpDQogICAgICAgICAgICAgICAgcmVncmVzc29yLmZpdChYX3RyYWluLCB5X3RyYWluKQ0KDQogICAgICAgICAgICAgICAgIyBNYWtlIHByZWRpY3Rpb25zDQogICAgICAgICAgICAgICAgeV9wcmVkX3RyYWluID0gcmVncmVzc29yLnByZWRpY3QoWF90cmFpbikNCiAgICAgICAgICAgICAgICB5X3ByZWRfdGVzdCA9IHJlZ3Jlc3Nvci5wcmVkaWN0KFhfdGVzdCkNCg0KICAgICAgICAgICAgICAgICMgUGxvdCB0aGUgYWN0dWFsIGFuZCBwcmVkaWN0ZWQgcHJpY2VzDQogICAgICAgICAgICAgICAgcGx0LmZpZ3VyZShmaWdzaXplPSgxMiwgNikpDQogICAgICAgICAgICAgICAgcGx0LnNjYXR0ZXIoWF90cmFpbiwgeV90cmFpbiwgY29sb3I9J2JsdWUnLCBsYWJlbD0nQWN0dWFsIChUcmFpbiknKQ0KICAgICAgICAgICAgICAgIHBsdC5zY2F0dGVyKFhfdGVzdCwgeV90ZXN0LCBjb2xvcj0nZ3JlZW4nLCBsYWJlbD0nQWN0dWFsIChUZXN0KScpDQogICAgICAgICAgICAgICAgcGx0LnBsb3QoWF90cmFpbiwgeV9wcmVkX3RyYWluLCBjb2xvcj0ncmVkJywgbGluZXN0eWxlPSc6JywgbGFiZWw9J1ByZWRpY3RlZCAoVHJhaW4pJykNCiAgICAgICAgICAgICAgICBwbHQucGxvdChYX3Rlc3QsIHlfcHJlZF90ZXN0LCBjb2xvcj0nb3JhbmdlJywgbGluZXN0eWxlPSc6JywgbGFiZWw9J1ByZWRpY3RlZCAoVGVzdCknKQ0KICAgICAgICAgICAgICAgIHBsdC54bGFiZWwoJ0RhdGUnKQ0KICAgICAgICAgICAgICAgIHBsdC55bGFiZWwoZid7Y3J5cHRvMn0gUHJpY2UgKFVTRCknKQ0KICAgICAgICAgICAgICAgIHBsdC50aXRsZShmJ3tjcnlwdG8yfSBQcmljZSBQcmVkaWN0aW9uICh7ZGF5fS1EYXkge2l9LUludGVydmFsKScpDQogICAgICAgICAgICAgICAgcGx0LmxlZ2VuZCgpDQogICAgICAgICAgICAgICAgcGx0LmdyaWQoVHJ1ZSkNCg0KICAgICAgICAgICAgICAgICMgQWRhcHRpdmUgbGFiZWwgZm9ybWF0dGluZyBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIGRheXMNCiAgICAgICAgICAgICAgICBpZiBkYXkgPD0gMTogICMgMS1EYXkgQ2hhcnQgKFNob3J0ZXIgSW50ZXJ2YWxzKQ0KICAgICAgICAgICAgICAgICAgICBwbHQuZ2NhKCkueGF4aXMuc2V0X21ham9yX2xvY2F0b3IobWRhdGVzLkhvdXJMb2NhdG9yKGludGVydmFsPTMpKQ0KICAgICAgICAgICAgICAgICAgICBwbHQuZ2NhKCkueGF4aXMuc2V0X21ham9yX2Zvcm1hdHRlcihtZGF0ZXMuRGF0ZUZvcm1hdHRlcignJUg6JU0nKSkgICMgRm9ybWF0IGFzIEhIOk1NDQoNCiAgICAgICAgICAgICAgICBlbGlmIGRheSA8PSA3OiAgIyAzLTcgRGF5cyBDaGFydCAoRGFpbHkgTGFiZWxzKQ0KICAgICAgICAgICAgICAgICAgICBwbHQuZ2NhKCkueGF4aXMuc2V0X21ham9yX2xvY2F0b3IobWRhdGVzLkRheUxvY2F0b3IoaW50ZXJ2YWw9MSkpDQogICAgICAgICAgICAgICAgICAgIHBsdC5nY2EoKS54YXhpcy5zZXRfbWFqb3JfZm9ybWF0dGVyKG1kYXRlcy5EYXRlRm9ybWF0dGVyKCclYiAlZCcpKSAgIyBGb3JtYXQgYXMgJ0ZlYiAxNCcNCg0KICAgICAgICAgICAgICAgIGVsc2U6ICAjIDEwKyBEYXlzIENoYXJ0IChMYWJlbCBFdmVyeSAyIERheXMpDQogICAgICAgICAgICAgICAgICAgIHBsdC5nY2EoKS54YXhpcy5zZXRfbWFqb3JfbG9jYXRvcihtZGF0ZXMuRGF5TG9jYXRvcihpbnRlcnZhbD0yKSkNCiAgICAgICAgICAgICAgICAgICAgcGx0LmdjYSgpLnhheGlzLnNldF9tYWpvcl9mb3JtYXR0ZXIobWRhdGVzLkRhdGVGb3JtYXR0ZXIoJyViICVkJykpICAjICdGZWIgMTQnDQoNCg0KICAgICAgICAgICAgICAgICMgQ29udmVydCB0aGUgcGxvdCB0byBhbiBpbi1tZW1vcnkgZmlsZS1saWtlIG9iamVjdA0KICAgICAgICAgICAgICAgIGJ1ZiA9IGlvLkJ5dGVzSU8oKQ0KICAgICAgICAgICAgICAgIHBsdC5zYXZlZmlnKGJ1ZiwgZm9ybWF0PSdwbmcnKQ0KICAgICAgICAgICAgICAgIGJ1Zi5zZWVrKDApICAjIE1vdmUgY3Vyc29yIHRvIHRoZSBzdGFydCBvZiB0aGUgZmlsZS1saWtlIG9iamVjdA0KDQogICAgICAgICAgICAgICAgIyBTZW5kIHRoZSBwbG90IGRpcmVjdGx5IHRvIHRoZSBEaXNjb3JkIHdlYmhvb2sNCiAgICAgICAgICAgICAgICB3ZWJob29rX3VybCA9IGRheXNfd2ViaG9va1tkYXldDQogICAgICAgICAgICAgICAgZmlsZXMgPSB7J2ZpbGUnOiAoJ3Bsb3QucG5nJywgYnVmLCAnaW1hZ2UvcG5nJyl9DQogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KHdlYmhvb2tfdXJsLCBmaWxlcz1maWxlcykNCg0KICAgICAgICAgICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlBsb3Qgc2VudCBzdWNjZXNzZnVsbHkgdG8gRGlzY29yZCEiKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KCJGYWlsZWQgdG8gc2VuZCB0aGUgcGxvdCB0byBEaXNjb3JkLiIpDQoNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgcHJpbnQoZiJFcnJvciBmZXRjaGluZyBkYXRhIGZyb20gWWFob28gRmluYW5jZSBmb3Ige2NyeXB0bzJ9ICh7ZGF5fS1EYXksIHtpfS1JbnRlcnZhbCk6IHtlfSIpDQoNCiAgICAjIFNlbmQgYSBzaW1wbGUgbWVzc2FnZSBpbnN0ZWFkIG9mIHRoZSBwbG90DQogICAgd2ViaG9va191cmwgPSBkYXlzX3dlYmhvb2tbZGF5XQ0KICAgIG1lc3NhZ2VfZGF0YSA9IHsiY29udGVudCI6ICIqKi0rLSstKy0rLSstQ09NUExFVEVELSstKy0rLSstKy0qKiJ9ICAjIE1lc3NhZ2UgdG8gYmUgc2VudA0KDQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KHdlYmhvb2tfdXJsLCBqc29uPW1lc3NhZ2VfZGF0YSkNCg0KICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoNCiAgICAgICAgcHJpbnQoIk1lc3NhZ2Ugc2VudCBzdWNjZXNzZnVsbHkiKQ0KICAgIGVsc2U6DQogICAgICAgIHByaW50KGYiRmFpbGVkIHRvIHNlbmQgdGhlIG1lc3NhZ2UuIEhUVFAgU3RhdHVzOiB7cmVzcG9uc2Uuc3RhdHVzX2NvZGV9LCBSZXNwb25zZToge3Jlc3BvbnNlLnRleHR9IikNCg==
'''
exec(base64.b64decode(xx))
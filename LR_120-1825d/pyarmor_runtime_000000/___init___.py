import base64
xx = b'''
aW1wb3J0IHlmaW5hbmNlIGFzIHlmDQppbXBvcnQgcGFuZGFzIGFzIHBkDQppbXBvcnQgbnVtcHkgYXMgbnANCmltcG9ydCBtYXRwbG90bGliLnB5cGxvdCBhcyBwbHQNCmltcG9ydCBtYXRwbG90bGliLmRhdGVzIGFzIG1kYXRlcw0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YQ0KZnJvbSBza2xlYXJuLm1vZGVsX3NlbGVjdGlvbiBpbXBvcnQgdHJhaW5fdGVzdF9zcGxpdA0KZnJvbSBza2xlYXJuLmxpbmVhcl9tb2RlbCBpbXBvcnQgTGluZWFyUmVncmVzc2lvbg0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgaW8NCg0KIyBHZXQgdXNlciBpbnB1dA0KY3J5cHRvMiA9ICdCVEMtVVNEJw0KdGVzdF9zaXplMiA9IDAuMg0KcmFuZG9tX3N0YXRlMiA9IDQyDQoNCiMgRGVmaW5lIHRoZSBkYXkgaW50ZXJ2YWwNCmRheXMgPSBbMTIwLCAxODAsIDI1MiwgMzY1LCA3MzAsIDE4MjVdDQoNCmRheXNfd2ViaG9vayA9IHsxMjA6J2h0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzEzNDM0NzM5NDk0ODg0NDc1MjkvWTBjLWptNTRGSnU4YndTNGpaVVNxVG14Sld0RFh3VTZvSGUycWZIb0hHWEN4OFpCWXFpRmRVajNmb3JQSUFFYmRqek0nLA0KICAgICAgICAgICAgICAgIDE4MDonaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTM0MzQ3NDA3OTY3OTkwNTg2Mi9Dbm1DZHU4ckJWT0lMQ2Y3LXpZZ2k5QUtZSHB1QjVPY3F6aHNwSW9nanFmYkl0SXlicklVcWtrdWFTd19tLVFxMGFjQScsDQogICAgICAgICAgICAgICAgMjUyOidodHRwczovL2Rpc2NvcmQuY29tL2FwaS93ZWJob29rcy8xMzQzNDc0MTkzMjcwMDQ2NzIwL1NfR2lsWmpXUU0tQ0trdWVIUmRHZ0Zvalh3QWNmclllZ1J2NFBnTUs3UVNCcEhrdmNqVi1WOXJuQXU3dWJGTzBTRHQ4JywNCiAgICAgICAgICAgICAgICAzNjU6J2h0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzEzNDM0NzQyNjQ1MTQyMzY0MTYvTDlnTVRkUDk0c3RqYUVvSmZYWC0waFZ1M3U0S08zb1ZIdVNLMmw3YnhramVDUUNoS0FXOWQ4TTJJdXI4WTRURXJabXInLA0KICAgICAgICAgICAgICAgIDczMDonaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTM0MzQ3NDMyOTcxODg4NjQ3Mi9YM25ZcjV1akVHUndhOXIwejhKNW4tX1N1WWNSelNqVnAzNU5OZUs4dGE3MDhkYkQ5RkFncEQxbW42ODA2dk0xZjhHbCcsDQogICAgICAgICAgICAgICAgMTgyNTonaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTM0MzQ3NDM3ODk0NzU1OTQ2Ny80bDdTUnhIRjBMMEtlWFFBbThPVHc0R3gyNUJPVThxNV9WcFhNdTd6aUpJOGttSnJKVFB6YUUxVTZFelB6bGdUb0NOdid9DQoNCmludGVydmFscyA9IFsnMW0nLCAnMm0nLCAnNW0nLCAnMTVtJywgJzMwbScsICc2MG0nLCAnOTBtJywgJzFoJywgJzFkJywgJzVkJywgJzF3aycsICcxbW8nLCAnM21vJ10NCg0KDQpmb3IgZGF5IGluIGRheXM6DQoNCiAgICBlbmRfZGF0ZSA9IGRhdGV0aW1lLm5vdygpDQogICAgc3RhcnRfZGF0ZSA9IGVuZF9kYXRlIC0gdGltZWRlbHRhKGRheXM9ZGF5KQ0KICAgIA0KICAgIGZvciBpIGluIGludGVydmFsczoNCiAgICAgICAgdHJ5Og0KDQogICAgICAgICAgICAjIEZldGNoIGhpc3RvcmljYWwgcHJpY2UgZGF0YQ0KICAgICAgICAgICAgZGF0YSA9IHlmLmRvd25sb2FkKGNyeXB0bzIsIHN0YXJ0PXN0YXJ0X2RhdGUsIGVuZD1lbmRfZGF0ZSwgaW50ZXJ2YWw9aSkNCg0KICAgICAgICAgICAgIyBDaGVjayBpZiBkYXRhIGlzIGVtcHR5DQogICAgICAgICAgICBpZiBkYXRhLmVtcHR5Og0KICAgICAgICAgICAgICAgIHByaW50KCJObyBkYXRhIGZvdW5kIGZvciB0aGUgZ2l2ZW4gaW5wdXQuIikNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgIyBQcmVwYXJlIHRoZSBkYXRhDQogICAgICAgICAgICAgICAgZGF0YVsnRGF0ZSddID0gcGQudG9fZGF0ZXRpbWUoZGF0YS5pbmRleCkNCiAgICAgICAgICAgICAgICBkYXRhWydEYXRlJ10gPSBkYXRhWydEYXRlJ10ubWFwKG1kYXRlcy5kYXRlMm51bSkgICMgQ29udmVydCBkYXRlcyB0byBudW1lcmljIHZhbHVlcw0KDQogICAgICAgICAgICAgICAgIyBDcmVhdGUgYSBkYXRhZnJhbWUgd2l0aCAnRGF0ZScgYW5kICdDbG9zZScgY29sdW1ucw0KICAgICAgICAgICAgICAgIGRmID0gZGF0YVtbJ0RhdGUnLCAnQ2xvc2UnXV0uY29weSgpDQoNCiAgICAgICAgICAgICAgICAjIFNwbGl0IHRoZSBkYXRhIGludG8gdHJhaW5pbmcgYW5kIHRlc3Rpbmcgc2V0cw0KICAgICAgICAgICAgICAgIFggPSBkZltbJ0RhdGUnXV0NCiAgICAgICAgICAgICAgICB5ID0gZGZbJ0Nsb3NlJ10NCiAgICAgICAgICAgICAgICBYX3RyYWluLCBYX3Rlc3QsIHlfdHJhaW4sIHlfdGVzdCA9IHRyYWluX3Rlc3Rfc3BsaXQoWCwgeSwgdGVzdF9zaXplPXRlc3Rfc2l6ZTIsIHJhbmRvbV9zdGF0ZT1yYW5kb21fc3RhdGUyKQ0KDQogICAgICAgICAgICAgICAgIyBUcmFpbiB0aGUgbGluZWFyIHJlZ3Jlc3Npb24gbW9kZWwNCiAgICAgICAgICAgICAgICByZWdyZXNzb3IgPSBMaW5lYXJSZWdyZXNzaW9uKCkNCiAgICAgICAgICAgICAgICByZWdyZXNzb3IuZml0KFhfdHJhaW4sIHlfdHJhaW4pDQoNCiAgICAgICAgICAgICAgICAjIE1ha2UgcHJlZGljdGlvbnMNCiAgICAgICAgICAgICAgICB5X3ByZWRfdHJhaW4gPSByZWdyZXNzb3IucHJlZGljdChYX3RyYWluKQ0KICAgICAgICAgICAgICAgIHlfcHJlZF90ZXN0ID0gcmVncmVzc29yLnByZWRpY3QoWF90ZXN0KQ0KDQogICAgICAgICAgICAgICAgIyBQbG90IHRoZSBhY3R1YWwgYW5kIHByZWRpY3RlZCBwcmljZXMNCiAgICAgICAgICAgICAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDEyLCA2KSkNCiAgICAgICAgICAgICAgICBwbHQuc2NhdHRlcihYX3RyYWluLCB5X3RyYWluLCBjb2xvcj0nYmx1ZScsIGxhYmVsPSdBY3R1YWwgKFRyYWluKScpDQogICAgICAgICAgICAgICAgcGx0LnNjYXR0ZXIoWF90ZXN0LCB5X3Rlc3QsIGNvbG9yPSdncmVlbicsIGxhYmVsPSdBY3R1YWwgKFRlc3QpJykNCiAgICAgICAgICAgICAgICBwbHQucGxvdChYX3RyYWluLCB5X3ByZWRfdHJhaW4sIGNvbG9yPSdyZWQnLCBsaW5lc3R5bGU9JzonLCBsYWJlbD0nUHJlZGljdGVkIChUcmFpbiknKQ0KICAgICAgICAgICAgICAgIHBsdC5wbG90KFhfdGVzdCwgeV9wcmVkX3Rlc3QsIGNvbG9yPSdvcmFuZ2UnLCBsaW5lc3R5bGU9JzonLCBsYWJlbD0nUHJlZGljdGVkIChUZXN0KScpDQogICAgICAgICAgICAgICAgcGx0LnhsYWJlbCgnRGF0ZScpDQogICAgICAgICAgICAgICAgcGx0LnlsYWJlbChmJ3tjcnlwdG8yfSBQcmljZSAoVVNEKScpDQogICAgICAgICAgICAgICAgcGx0LnRpdGxlKGYne2NyeXB0bzJ9IFByaWNlIFByZWRpY3Rpb24gKHtkYXl9LURheSB7aX0tSW50ZXJ2YWwpJykNCiAgICAgICAgICAgICAgICBwbHQubGVnZW5kKCkNCiAgICAgICAgICAgICAgICBwbHQuZ3JpZChUcnVlKQ0KDQoNCiAgICAgICAgICAgICAgICAjIEFkYXB0aXZlIGxhYmVsIGZvcm1hdHRpbmcgYmFzZWQgb24gdGhlIG51bWJlciBvZiBkYXlzDQogICAgICAgICAgICAgICAgaWYgZGF5IDw9IDEyMDogICMgTGFiZWwgZXZlcnkgNyBkYXlzDQogICAgICAgICAgICAgICAgICAgIHBsdC5nY2EoKS54YXhpcy5zZXRfbWFqb3JfbG9jYXRvcihtZGF0ZXMuRGF5TG9jYXRvcihpbnRlcnZhbD0xNSkpDQogICAgICAgICAgICAgICAgICAgIHBsdC5nY2EoKS54YXhpcy5zZXRfbWFqb3JfZm9ybWF0dGVyKG1kYXRlcy5EYXRlRm9ybWF0dGVyKCclYiAlZCcpKSAgIyAnRmViIDE0JyBmb3JtYXQNCg0KICAgICAgICAgICAgICAgIGVsaWYgZGF5IDw9IDE4MDogICMgTGFiZWwgZXZlcnkgMTAgZGF5cw0KICAgICAgICAgICAgICAgICAgICBwbHQuZ2NhKCkueGF4aXMuc2V0X21ham9yX2xvY2F0b3IobWRhdGVzLkRheUxvY2F0b3IoaW50ZXJ2YWw9MTgpKQ0KICAgICAgICAgICAgICAgICAgICBwbHQuZ2NhKCkueGF4aXMuc2V0X21ham9yX2Zvcm1hdHRlcihtZGF0ZXMuRGF0ZUZvcm1hdHRlcignJWIgJWQnKSkNCg0KICAgICAgICAgICAgICAgIGVsaWYgZGF5IDw9IDI1MjogICMgTGFiZWwgZXZlcnkgMTUgZGF5cw0KICAgICAgICAgICAgICAgICAgICBwbHQuZ2NhKCkueGF4aXMuc2V0X21ham9yX2xvY2F0b3IobWRhdGVzLkRheUxvY2F0b3IoaW50ZXJ2YWw9MzIpKQ0KICAgICAgICAgICAgICAgICAgICBwbHQuZ2NhKCkueGF4aXMuc2V0X21ham9yX2Zvcm1hdHRlcihtZGF0ZXMuRGF0ZUZvcm1hdHRlcignJWIgJWQnKSkNCg0KICAgICAgICAgICAgICAgIGVsaWYgZGF5IDw9IDM2NTogICMgTGFiZWwgZXZlcnkgMSBtb250aA0KICAgICAgICAgICAgICAgICAgICBwbHQuZ2NhKCkueGF4aXMuc2V0X21ham9yX2xvY2F0b3IobWRhdGVzLk1vbnRoTG9jYXRvcihpbnRlcnZhbD0yKSkNCiAgICAgICAgICAgICAgICAgICAgcGx0LmdjYSgpLnhheGlzLnNldF9tYWpvcl9mb3JtYXR0ZXIobWRhdGVzLkRhdGVGb3JtYXR0ZXIoJyViICVZJykpICAjICdGZWIgMjAyNScgZm9ybWF0DQoNCiAgICAgICAgICAgICAgICBlbGlmIGRheSA8PSA3MzA6ICAjIExhYmVsIGV2ZXJ5IDIgbW9udGhzDQogICAgICAgICAgICAgICAgICAgIHBsdC5nY2EoKS54YXhpcy5zZXRfbWFqb3JfbG9jYXRvcihtZGF0ZXMuTW9udGhMb2NhdG9yKGludGVydmFsPTMpKQ0KICAgICAgICAgICAgICAgICAgICBwbHQuZ2NhKCkueGF4aXMuc2V0X21ham9yX2Zvcm1hdHRlcihtZGF0ZXMuRGF0ZUZvcm1hdHRlcignJWIgJVknKSkNCg0KICAgICAgICAgICAgICAgIGVsc2U6ICAjIDUrIHllYXJzLCBsYWJlbCBldmVyeSA2IG1vbnRocw0KICAgICAgICAgICAgICAgICAgICBwbHQuZ2NhKCkueGF4aXMuc2V0X21ham9yX2xvY2F0b3IobWRhdGVzLk1vbnRoTG9jYXRvcihpbnRlcnZhbD03KSkNCiAgICAgICAgICAgICAgICAgICAgcGx0LmdjYSgpLnhheGlzLnNldF9tYWpvcl9mb3JtYXR0ZXIobWRhdGVzLkRhdGVGb3JtYXR0ZXIoJyViICVZJykpDQoNCg0KDQogICAgICAgICAgICAgICAgIyBDb252ZXJ0IHRoZSBwbG90IHRvIGFuIGluLW1lbW9yeSBmaWxlLWxpa2Ugb2JqZWN0DQogICAgICAgICAgICAgICAgYnVmID0gaW8uQnl0ZXNJTygpDQogICAgICAgICAgICAgICAgcGx0LnNhdmVmaWcoYnVmLCBmb3JtYXQ9J3BuZycpDQogICAgICAgICAgICAgICAgYnVmLnNlZWsoMCkgICMgTW92ZSBjdXJzb3IgdG8gdGhlIHN0YXJ0IG9mIHRoZSBmaWxlLWxpa2Ugb2JqZWN0DQoNCiAgICAgICAgICAgICAgICAjIFNlbmQgdGhlIHBsb3QgZGlyZWN0bHkgdG8gdGhlIERpc2NvcmQgd2ViaG9vaw0KICAgICAgICAgICAgICAgIHdlYmhvb2tfdXJsID0gZGF5c193ZWJob29rW2RheV0NCiAgICAgICAgICAgICAgICBmaWxlcyA9IHsnZmlsZSc6ICgncGxvdC5wbmcnLCBidWYsICdpbWFnZS9wbmcnKX0NCiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3Qod2ViaG9va191cmwsIGZpbGVzPWZpbGVzKQ0KDQogICAgICAgICAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOg0KICAgICAgICAgICAgICAgICAgICBwcmludCgiUGxvdCBzZW50IHN1Y2Nlc3NmdWxseSB0byBEaXNjb3JkISIpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkZhaWxlZCB0byBzZW5kIHRoZSBwbG90IHRvIERpc2NvcmQuIikNCg0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBwcmludChmIkVycm9yIGZldGNoaW5nIGRhdGEgZnJvbSBZYWhvbyBGaW5hbmNlIGZvciB7Y3J5cHRvMn0gKHtkYXl9LURheSwge2l9LUludGVydmFsKToge2V9IikNCg0KICAgICMgU2VuZCBhIHNpbXBsZSBtZXNzYWdlIGluc3RlYWQgb2YgdGhlIHBsb3QNCiAgICB3ZWJob29rX3VybCA9IGRheXNfd2ViaG9va1tkYXldDQogICAgbWVzc2FnZV9kYXRhID0geyJjb250ZW50IjogIioqLSstKy0rLSstKy1DT01QTEVURUQtKy0rLSstKy0rLSoqIn0gICMgTWVzc2FnZSB0byBiZSBzZW50DQoNCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3Qod2ViaG9va191cmwsIGpzb249bWVzc2FnZV9kYXRhKQ0KDQogICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOg0KICAgICAgICBwcmludCgiTWVzc2FnZSBzZW50IHN1Y2Nlc3NmdWxseSIpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoZiJGYWlsZWQgdG8gc2VuZCB0aGUgbWVzc2FnZS4gSFRUUCBTdGF0dXM6IHtyZXNwb25zZS5zdGF0dXNfY29kZX0sIFJlc3BvbnNlOiB7cmVzcG9uc2UudGV4dH0iKQ0K
'''
exec(base64.b64decode(xx))
import base64
xx = b'''
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import requests
import io

# Get user input
crypto2 = 'BTC-USD'
test_size2 = 0.2
random_state2 = 42

# Define the day interval
days = [21, 30, 50, 60, 90]

days_webhook = {21:'https://discord.com/api/webhooks/1343465264066465834/E3EIacBOmGeAzptA9g9figsYQbuDODFEJpN4qui37-mlLlxOrLNuVLseYuwdC9LffB12',
                30:'https://discord.com/api/webhooks/1343465339278721094/HqpCWA1c6_UlOyHZKQ5xB7LZ5af4H4P2W5Sw8FnUkIWtiHA571GLDOgAz3aFknGujVsP',
                50:'https://discord.com/api/webhooks/1343465432975409193/DHIBObrckJPdbtcbyGQnHTmxBJE9EVrOSYqfpluoFz-jtY6j0Qi0wsNlCNKvJ-y_u5CJ',
                60:'https://discord.com/api/webhooks/1343465524427886633/Nv8YsL25eIIz2U6rc5U14zJFor0oEvji8OLjc8Y_Bk2rhssFyYR9FHiwVP1BAZLincLf',
                90:'https://discord.com/api/webhooks/1343465595370344528/Gu6--r9T0e0nEkEHELAGbywpTJ9SJDOAKjQju9HyA77YpBP6DrJfHEvTKk5m6oGOuo2Z'}

intervals = ['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1wk', '1mo', '3mo']


for day in days:

    end_date = datetime.now()
    start_date = end_date - timedelta(days=day)
    
    for i in intervals:
        try:

            # Fetch historical price data
            data = yf.download(crypto2, start=start_date, end=end_date, interval=i)

            # Check if data is empty
            if data.empty:
                print("No data found for the given input.")
            else:
                # Prepare the data
                data['Date'] = pd.to_datetime(data.index)
                data['Date'] = data['Date'].map(mdates.date2num)  # Convert dates to numeric values

                # Create a dataframe with 'Date' and 'Close' columns
                df = data[['Date', 'Close']].copy()

                # Split the data into training and testing sets
                X = df[['Date']]
                y = df['Close']
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size2, random_state=random_state2)

                # Train the linear regression model
                regressor = LinearRegression()
                regressor.fit(X_train, y_train)

                # Make predictions
                y_pred_train = regressor.predict(X_train)
                y_pred_test = regressor.predict(X_test)

                # Plot the actual and predicted prices
                plt.figure(figsize=(12, 6))
                plt.scatter(X_train, y_train, color='blue', label='Actual (Train)')
                plt.scatter(X_test, y_test, color='green', label='Actual (Test)')
                plt.plot(X_train, y_pred_train, color='red', linestyle=':', label='Predicted (Train)')
                plt.plot(X_test, y_pred_test, color='orange', linestyle=':', label='Predicted (Test)')
                plt.xlabel('Date')
                plt.ylabel(f'{crypto2} Price (USD)')
                plt.title(f'{crypto2} Price Prediction ({day}-Day {i}-Interval)')
                plt.legend()
                plt.grid(True)

                # Adaptive label formatting based on the number of days
                if day <= 21:  # Shorter time frame, use hourly markers
                    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=3))
                    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))

                elif day <= 30:  # Display daily labels
                    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=4))
                    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))  # 'Feb 14' format

                elif day <= 50:  # Label every 2 days
                    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=6))
                    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))

                elif day <= 60:  # Label every 3 days
                    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=7))
                    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))

                elif day <= 90:  # Label every 5 days
                    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=10))
                    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))

                else:  # Long-term charts (90+ days), label weekly
                    plt.gca().xaxis.set_major_locator(mdates.WeekdayLocator(interval=2))
                    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))


                # Convert the plot to an in-memory file-like object
                buf = io.BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)  # Move cursor to the start of the file-like object

                # Send the plot directly to the Discord webhook
                webhook_url = days_webhook[day]
                files = {'file': ('plot.png', buf, 'image/png')}
                response = requests.post(webhook_url, files=files)

                if response.status_code == 200:
                    print("Plot sent successfully to Discord!")
                else:
                    print("Failed to send the plot to Discord.")

        except Exception as e:
            print(f"Error fetching data from Yahoo Finance for {crypto2} ({day}-Day, {i}-Interval): {e}")

    # Send a simple message instead of the plot
    webhook_url = days_webhook[day]
    message_data = {"content": "**-+-+-+-+-+-COMPLETED-+-+-+-+-+-**"}  # Message to be sent

    response = requests.post(webhook_url, json=message_data)

    if response.status_code == 200:
        print("Message sent successfully")
    else:
        print(f"Failed to send the message. HTTP Status: {response.status_code}, Response: {response.text}")

'''
exec(base64.b64decode(xx))